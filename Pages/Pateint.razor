@page "/pateints";
@using BlazorForms.Data
@using Radzen.Blazor
@inject Data.ApplicationDbContext db;
@inject NavigationManager nav
@attribute [Authorize]
@inject IJSRuntime js
<h3>Pateint</h3>
<EditForm Model="@patien" OnValidSubmit="@ValidData" FormName="forml" class="row g-3">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="col-nd-6">

        <label for="inputName" class="forn-label">PatientName</label>
        <InputText @bind-Value="patien.PatientName" class="form-control" id="inputName" />
    </div>
    <div class="col-nd-6">

        <label for="inputName" class="forn-label">Patient Discription</label>
        <InputText @bind-Value="patien.PatientDiscription" class="form-control" id="inputName" />
    </div>
   
@*     <div class="col-nd-6">

        <label for="inputName" class="forn-label">Doctor</label>
        <InputText @bind-Value="patien.Doctor" class="form-control" id="inputName" />
    </div> *@
    <div class="form-group">
        <label for="selectedValueId">Select a Speciality:</label>
        <select id="selectedValueId" name="SelectedValueId" asp-for="SelectedValueId" class="form-control" @bind="patien.SpecialityId" >
            <option value="">-- Select --</option>
            @foreach (var option in specialities)
            {
                <option value="@option.Id" >@option.SpecialityName</option>
            }
        </select>
    </div> 
    <div class="form-group">
        <label for="selectedValueId">Select a Doctor:</label>
        <select id="selectedValueId" name="SelectedValueId" asp-for="SelectedValueId" class="form-control" @bind="patien.DoctorId" >
            <option value="">-- Select --</option>
            @foreach (var option in doctors)
            {
                <option value="@option.Id" >@option.DoctorName</option>
            }
        </select>
    </div>
    <div class="col-nd-6">

        <label for="inputName" class="forn-label">Patient Date</label>
        <InputDate @bind-Value="patien.createAt" class="form-control" id="inputName" />
    </div>
    <button type="submit" class="btn btn-primary">Add Patient</button>
</EditForm>




<h3>Patients</h3>

    <RadzenGrid TItem="Patient" Data="@customers" AllowPaging="true" PageSize="2" AllowFiltering="true" AllowSorting="true" TItem="newpateint" ColumnWidth="120">
    <Columns>
        <RadzenGridColumn TItem="Patient" Property="Id" Title="Id" />
        <RadzenGridColumn TItem="Patient" Property="PatientName" Title="PatientName" />
            <RadzenGridColumn TItem="Patient" Property="PatientDiscription" Title="PatientDiscription" />
            <RadzenGridColumn TItem="Patient" Property="SpecialityId" Title="Speciality" />
            <RadzenGridColumn TItem="Patient" Property="DoctorId" Title="Doctor" />
            <RadzenGridColumn TItem="Patient" Property="createAt" Title="DateTime" />
      @*   <RadzenButton Icon="close" ButtonStyle="Radzen.ButtonStyle.Light" Size="Radzen.ButtonSize.Medium" class="my-1 ms-1" Click="@((args) => DeleteItem(customer))">
                </RadzenButton>
        <RadzenButton ButtonStyle="Radzen.ButtonStyle.Danger" Icon="delete" Shade="Radzen.Shade.Lighter" Size="Radzen.ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteItem(customers))"></RadzenButton> *@
    </Columns>
</RadzenGrid>
    

@code {
    [SupplyParameterFromQuery]
    public Patient patien { get; set; }
    List<Patient> newpatients;
    List<Speciality> specialities;
    List<Doctor> doctors;


    private List<Patient> customers;


    protected override async Task OnInitializedAsync()
    {
        patien = new();
        specialities = db.specialities.ToList();
        doctors = db.doctors.ToList();
        newpatients = db.patients.ToList();
        CustomerService p = new CustomerService(db);
        customers = await p.GetCustomersAsync();
    }

    void ValidData()
    {
        newpatients.Add(patien);
        db.patients.Add(patien);
        db.SaveChanges();
        customers.Add(patien);
        patien = new();

        patien.PatientName = "";
        patien.PatientDiscription = "";
        patien.SpecialityId = 0;
        patien.DoctorId = 0;

    }
    private async void DeleteItem(Patient pat)
    {

        bool accept = await js.InvokeAsync<bool>("confirm", "Are You sure to delete this");
        // js.InvokeVoidAsync("alert", "hello From Javascript");
        if(accept == true)
        {
            newpatients.Remove(pat);
            db.patients.Remove(pat);

            db.SaveChanges();
            StateHasChanged();
        }
   

    }
    void editItem(int id)

    {
        nav.NavigateTo($"/editpatient/{id}");

    }
}
